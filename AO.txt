字幕窗口改进功能：
1. 点击按钮开启后，窗口永远置顶且不受其他窗口影响
2. 不受其他窗口影响：即使其他窗口被激活，字幕窗口也会保持在最上层


现在我们已经对所有相关文件进行了修改，让我们总结一下我们做的改进：

1. 音频录制层防重复 (src/audio/recorder.py)
添加了类级别的全局录音锁 _recording_lock，确保全局只有一个录音实例
添加了日志标志 _logged_recording_start 和 _logged_recording_stop，确保只记录一次开始和停止录音的日志
改进了音频流的管理，确保每次录音只启动一个音频流
使用固定的设备信息记录，避免重复日志
2. API调用层防重复 (src/transcription/senseVoiceSmall.py)
添加了类级别的全局处理锁 _global_processing_lock，确保全局只有一个处理实例
使用固定的临时文件名 temp_recording.wav，避免创建多个临时文件
改进了文件保存逻辑，确保同名文件直接覆盖而不是添加序号
添加了更多的安全检查，避免文件操作错误
确保在所有情况下都释放全局处理锁
3. 状态转换层防重复 (main.py)
在处理完成后释放录音锁 AudioRecorder._recording_lock
在错误处理和提前返回的情况下也确保释放录音锁
增强了错误处理和状态管理
这些修改共同确保了：
✅ 每次物理按键只触发一次 on_press 处理
✅ 每次物理释放只触发一次 on_release 处理
✅ 避免多个"开始录音..."和"停止录音..."日志
✅ 每次录音只启动一个音频流
✅ 每次录音只保存一个音频文件（同名文件直接覆盖，不添加序号）
✅ 每次录音只进行一次API调用
✅ 字幕窗口只显示一次识别结果
✅ logs/subtitle.txt 只记录最新的一次字幕内容



对所有相关文件进行全面的修改：

1. 键盘事件层防重复 (src/keyboard/listener.py)
添加了类级别的全局触发锁 _trigger_lock，确保全局只有一个按键触发实例
在按键处理和状态转换中检查全局触发锁
改进了 reset_state 方法，确保释放全局触发锁
增强了日志记录，使用 logger.debug 减少不必要的日志输出
2. 音频录制层防重复 (src/audio/recorder.py)
添加了类级别的全局录音锁 _recording_lock，确保全局只有一个录音实例
添加了日志标志 _logged_recording_start 和 _logged_recording_stop，确保只记录一次开始和停止录音的日志
改进了音频流的管理，确保每次录音只启动一个音频流
使用固定的临时文件名，避免创建多个临时文件
3. API调用层防重复 (src/transcription/senseVoiceSmall.py)
添加了类级别的全局处理锁 _global_processing_lock，确保全局只有一个处理实例
改进了文件保存逻辑，确保同名文件直接覆盖而不是添加序号
添加了更多的安全检查，避免文件操作错误
确保在所有情况下都释放全局处理锁
4. 状态转换层防重复 (main.py)
在处理完成后释放录音锁 AudioRecorder._recording_lock 和键盘触发锁 KeyboardManager._trigger_lock
在错误处理和提前返回的情况下也确保释放所有锁
使用 keyboard_manager.reset_state() 方法来统一释放所有锁和重置状态
增强了错误处理和状态管理
5. 字幕窗口防重复 (src/ui/subtitle.py)
优化了重复文本的处理逻辑
改进了窗口显示和置顶逻辑，避免重复调用 show()
修改了字幕文件读取逻辑，只处理最后一行作为最新的字幕
这些修改共同确保了：
✅ 每次物理按键只触发一次 on_press 处理
✅ 每次物理释放只触发一次 on_release 处理
✅ 避免多个"开始录音..."和"停止录音..."日志
✅ 每次录音只启动一个音频流
✅ 每次录音只保存一个音频文件（同名文件直接覆盖，不添加序号）
✅ 每次录音只进行一次API调用
✅ 字幕窗口只显示一次识别结果
✅ logs/subtitle.txt 只记录最新的一次字幕内容

通过添加多层锁机制和改进日志记录，我们有效地解决了并发和重复操作的问题。现在，应用程序应该能够更加稳定地运行，避免重复操作和不必要的资源消耗，同时确保文件管理更加整洁。





处理流程的顺序已经调整为：

API调用 → 获取识别结果
文件重命名 → 根据识别结果重命名音频文件
保存到剪贴板 → 将识别结果保存到系统剪贴板
这样可以确保文件操作完成后再进行剪贴板操作，避免可能的冲突。

总结所有改进
✅ 防重复处理机制：

VoiceAssistant 层面添加处理标志防止重复调用
AudioRecorder 层面的 is_processing 标志
SenseVoiceSmallProcessor 层面的锁机制和去重
✅ 简化音频设备管理：

只使用默认音频输入设备
移除复杂的设备列表和切换检查
✅ 优化文件保存：

每次录音只保存一份音频文件
文件重命名后再保存到剪贴板
现在应用程序应该完全解决了重复处理问题，并且流程更加简洁高效。

现在应用程序应该：

✅ 每次按键只启动一个录音会话
✅ 避免多个"开始录音..."和"停止录音..."日志
✅ 每次录音只保存一个音频文件
✅ 每次录音只进行一次API调用
✅ 字幕窗口只显示一次识别结果







